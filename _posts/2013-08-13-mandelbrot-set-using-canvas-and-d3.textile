---
layout: post
title: Rendering Mandelbrot Set using canvas and d3.js
---

h3. {{ page.title }}

<i>Initially drafted in Aug 2013; updated April 2016</i>

<div class="post_payload">

  <h3> --------- Work in progress ------------</h3>

  <center>
    <div id="rendering-mandelbrot" class="center">
      <b>Rendering Mandelbrot set!</b> <img src="/images/spinner.gif" />
    </div>
    <div id="mandelbrot">
    </div>
  </center>

  <h4>What does the Mandelbrot set contain and how do we build it?</h4>

  <div class='para'>
    <div class='idx'>1.</div>
    <div class='x'>
      <span class='idx-sm'>1.</span>
      A "Mandelbrot set" is a collection of complex numbers; It contains as its elements various complex numbers.<br />
      To check if <u>a given complex number</u> is in the "Mandelbrot set", we have to <u>perform a certain mathematical operation</u>
      on the complex number <u>over and over</u> to <u>identify if the result has a certain property</u>.<br />
    </div>
  </div>
  <div class='para-brk'></div>

  <div class='para'>
    <div class='idx'>2.</div>
    <div class='x'>
      <span class='idx-sm'>2.</span>
      <i>What do we mean by the phrase "<u>a given complex number</u>"?</i><br />
      Every complex number in the complex plane is either in the Mandelbrot set or it is not.<br />
      Therefore, to build the Mandelbrot set we have to take each complex number in the complex plane
      and check if it is in the Mandelbrot set.<br />
      <br />
      For example, the following block of code uses two loops, one nested inside the other, to print complex numbers
      between -1 + -1i and 1 + 1i ; in steps of 0.5:<br />

<pre>
for(
  var real_part = -1.0;
      real_part <= 1.0;
      real_part += 0.5
) {
  for(
    var imaginary_part = -1.0;
        imaginary_part <= 1.0;
        imaginary_part += 0.5
  ) {

    var given_complex_number = {
      real: real_part,
      imaginary: imaginary_part
    }
    console.log(
      given_complex_number.real +
      ' + ' +
      given_complex_number.imaginary +
      'i'
    )

    /** This function needs to be implemented **/
    // isMemberOfMandelbrotSet(given_complex_number)

  }
}

OUTPUT:

-1 + -1i
-1 + -0.5i
-1 + 0i
-1 + 0.5i
-1 + 1i
-0.5 + -1i
-0.5 + -0.5i
-0.5 + 0i
-0.5 + 0.5i
-0.5 + 1i
0 + -1i
0 + -0.5i
0 + 0i
0 + 0.5i
0 + 1i
0.5 + -1i
0.5 + -0.5i
0.5 + 0i
0.5 + 0.5i
0.5 + 1i
1 + -1i
1 + -0.5i
1 + 0i
1 + 0.5i
1 + 1i
</pre>

    </div>
  </div>
  <div class='para-brk'></div>

  <div class='para'>
    <div class='idx'>3.</div>
    <div class='x'>
      <span class='idx-sm'>3.</span>
      <i>The mathematical operation and its result:</i><br />
      &nbsp; => The mathematical operation - performed on the given complex number<br />
      &nbsp; => The result - of this mathematical operation<br />
      &nbsp; => The property of this result, which determines if the complex number is in the "Mandelbrot set"<br />
      <br />
    </div>
  </div>
  <div class='para-brk'></div>

  <h4>The mathematical operation:</h4>
  <p>
    The mathematical operation contains two complex numbers.<br />
    It performs one complex number Multiplication operation and
    one complex number addition operation.<br />
    <br />
    Let us call the two complex numbers: c and z
    <br />
    The complex number c:<br />
      We have to detect if c is a member of the "Mandelbrot set".<br />
      Therefore, we get to choose the value of c.<br />
    <br />
    The complex number z:<br />
      As we perform the mathematical operation over and over we will store the result in z<br />
      Before we perform the mathematical operation for the first time we will set the value of z to 0.<br />
      Therefore, previous results will have a say in determining the latest result.<br />
    <br />
    step 1: Square z<br />
    step 2: Add c to result of step 1<br />
    step 3: assign the result of step 2 to z<br />
    These 3 steps can be written as:<br />
    z = z^2 + c
    <br />
    We have to perform this operation until we are able to determine if the z is Zero
  </p>

  <h4></h4>
  <p>
    If this result approaches Zero then we conclude that the given complex number is in the "Mandelbrot set".<br />
    Otherwise, we conclude that the given complex number is not in the "Mandelbrot set".<br />
    <br />
    For each complex number that is not part of the Mandelbrot set<br />
    we are interested in knowing how quickly we are able to decide that the<br />
    results of the mathematical operation will not approach Zero.<br />
    <br />
    This property of the result not approaching Zero, is referred to as 'escaping to Infinity'<br />
      - if it is not moving towards Zero, then it must be moving towards Infinity.<br />
    <br />
    How can I be sure that when I perform this operation repeatedly,<br />
    the result will not remain unchanged - neither approach Zero nor escape to Infinity?<br />
    <br />
    to find the answer for these questions, let us look at this mathematical operation:<br />
    <br />
    initialize z = 0<br />
    c = z^2 + c<br />
    
  </p>

  <p>
    z_n+1 = z_n^2 + c<br />
    z_1 = 0^2 + c when n = 0<br />
    z_2 = c^2 + c when n = 1<br />
    z_3 = (c^2+c)^2 + c when n = 2<br />
    z+4 = ((c^2+c)^2+c)^2 + c<br />
  </p>

</div>

<script>
  window.addEventListener(
    'load', function(event) {
       /* ["/js/all_mandelbrot.js"] */
       ["/js/d3.v3.min.js", "/js/mandelbrot.js"].forEach(function(script_src_url) {
         var script_element = window.document.createElement('script')
         script_element.src = script_src_url
         script_element.type = 'text/javascript'
         script_element.async = true
         window.document.body.appendChild(script_element)
       })
    }
  )
</script>
