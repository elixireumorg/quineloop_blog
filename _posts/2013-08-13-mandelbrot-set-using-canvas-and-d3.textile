---
layout: post
title: Rendering Mandelbrot Set using canvas and d3.js
---

h3. {{ page.title }}

<i>Initially drafted in Aug 2013; updated April 2016</i>

<div class="post_payload">

  <h3> --------- Work in progress ------------</h3>

  <center>
    <div id="rendering-mandelbrot" class="center">
      <b>Rendering Mandelbrot set!</b> <img src="/images/spinner.gif" />
    </div>
    <div id="mandelbrot">
    </div>
  </center>

  <h4>Describing the Mandelbrot:</h4>

  <div class='para'>
    <div class='idx'>1.</div>
    <div class='x'>
      <span class='idx-sm'>1.</span>
      A "Mandelbrot set" is a set that contains as its elements various complex numbers.<br />
      <br />
      To check if <u>a given complex number</u> is in the "Mandelbrot set", we have to <u>perform a certain mathematical operation</u>
      on the complex number <u>over and over</u> and <u>identify if the result has a certain property</u>.<br />
      <h5>Meaning:</h5>
      <u>Given complex number</u>: This refers to any complex number that we can choose at will - to check if it is in the "Mandelbrot set"<br />
      <br />
      <u>The repetitive mathematical operation</u>:<br />
      A simplified but not entierly accurate description of the mathematical operation can say
      that we square the given complex number and add it to itself.<br />
      We repeat this operation over and over until we can determine if the result will always stay less than some value.<br />
      This property of always staying less then some value is called being <b>"bounded"</b>.<br />
      If the result of a repetative operation is not bounded then it means that it will be -<br />
      Ever increasing - if it moves toward positive Infinity<br />
      or<br />
      Ever decreasing - if it moves toward negative Infinity<br />
      This behavior is called <b>"escaping to Infinity"</b>.<br />
      <br />
      The operation can be accurately described as the following function:<br />
      <math>
        <msub><mi>f</mi><mn mathvariant='bold'>c</mn></msub>
        <mfenced>
          <mi>z</mi>
        </mfenced>
        <mo>=</mo>
        <msup><mi>z</mi><mn>2</mn></msup>
        <mo>+</mo>
        <mi mathvariant='bold'>c</mi>
      </math>
      <br />
      Where <math><mi mathvariant='bold'>c</mi></math> is the <b>Given complex number</b><br />
      and <math><mi>z</mi></math> is the result we got from the previous call to this function.<br />
      When we call the function for the first time we use Zero as the value of <math><mi>z</mi></math>.<br />
      One must note that the "Given complex number" <math><mi mathvariant='bold'>c</mi></math> is a constant in the function.<br />
      The subscript <math><mi>c</mi></math> in <math><msub><mi>f</mi><mn mathvariant='bold'>c</mn></msub></math>
      is simply a convention which remainds us that the "Given complex number" plays a part in defining the behavior of this function.<br />
      <br />
      <u>Property of the mathematical operation's result</u>:<br />
      If, for a given complex number, the result of this repeated operation will remain within some bounds
      than we conclude that the complex number is in the "Mandelbrot set".<br />
      If the result of this repeated operation does not stay within any bounds and keeps moving towards Infinity with each
      repetition - then the complex number is not a member of the "Mandelbrot set".<br />
      <br />
      In the above "Mandelbrot set" visualization, each pixel represents a complex number.<br />
      A pixel is colored black if the complex number it represents is part of "Mandelbrot set".<br />
      If the complex number representing a pixel is not in the "Mandelbrot set" then we assign it a color based on how quickly
      we were able to determine that it will "escape to" Infinity.
    </div>
  </div>
  <div class='para-brk'></div>
  
  <h4>Who do we implement this as a program?</h4>

  <div class='para'>
    <div class='idx'>2.</div>
    <div class='x'>
      <span class='idx-sm'>2.</span>
      <b>Loop over all complex numbers in the complex plane:</b>
      <br />
      Every complex number in the complex plane is either in the Mandelbrot set or it is not.<br />
      Therefore, to build the Mandelbrot set we have to take each complex number in the complex plane
      and check if it is in the Mandelbrot set.<br />
      <br />
      For example, the following block of code uses two loops, one nested inside the other, to print complex numbers
      between -1 + -1i and 1 + 1i ; in steps of 0.5:<br />

<pre>
for(
  var real_part = -1.0;
      real_part <= 1.0;
      real_part += 0.5
) {
  for(
    var imaginary_part = -1.0;
        imaginary_part <= 1.0;
        imaginary_part += 0.5
  ) {
    var given_complex_number = {
      real: real_part,
      imaginary: imaginary_part
    }
    console.log(
      given_complex_number.real +
      ' + ' +
      given_complex_number.imaginary +
      'i'
    )
  }
}
</pre>
      <br />
      But, to create the visualization we need more than just a simple nested loop that can give us complex numbers.<br />
      <br />
      (a) We should be able to access each pixel so that it can be associated with a complex number.<br />
      For efficiently reading & writeing indiviual pixels we can use the ImageData object that is part of the canvas element.<br />
      The ImageData object represents underlying pixel data of an area of a canvas element.<br />
      <br />
      (b) We should be able to transform a screen area of some pixel height & width into a complex plane containing Real and Imaginary axes.
      <br />    

    </div>
  </div>
  <div class='para-brk'></div>

  <div class='para'>
    <div class='idx'>3.</div>
    <div class='x'>
      <span class='idx-sm'>3.</span>
      <b>Repetitive squaring of a complex number and then adding another complex number to it:</b>
      <br />
    </div>
  </div>
  <div class='para-brk'></div>

  <div class='para'>
    <div class='idx'>4.</div>
    <div class='x'>
      <span class='idx-sm'>5.</span>
      <b>Checking if the resulting complex number has been staying bounded:</b>
      <br />
    </div>
  </div>
  <div class='para-brk'></div>

</div>

<script>
  window.addEventListener(
    'load', function(event) {
       /* ["/js/all_mandelbrot.js"] */
       ["/js/d3.v3.min.js", "/js/mandelbrot.js"].forEach(function(script_src_url) {
         var script_element = window.document.createElement('script')
         script_element.src = script_src_url
         script_element.type = 'text/javascript'
         script_element.async = true
         window.document.body.appendChild(script_element)
       })
    }
  )
</script>
